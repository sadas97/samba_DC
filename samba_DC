#!/bin/bash

#Check if user is root
if [ "$EUID" == 0 ]; then

#Confirming that conditions needed for the correct funtioning of the script are met
    printf "\nBefore you run this script make sure\n- No Samba processes are running"\
"\n- You have set a static IP adresses for this machine\n- Your machine correctly resolves "\
"fully-qualified domain name and short hostname (in /etc/hosts)\n- Your DCs and domain members have synchronised time using NTP"\
"\nIn case of a domain controller replication\n- You have a copy of the idmap.ldb file from you main DC in the folder where "\
"this script is located\nIf your main DC is Samba\n- rsync is installed and configured on it\n"


    printf "Are these conditions met? y/n\n"
    ConfirmReset=1
    while [ "${ConfirmReset}" == 1 ]; do
	if [ -z "${ConfirmMessage}" ]; then
	    ConfirmMessage=1
	elif [ "${ConfirmMessage}" ]; then
	    printf "\nMust enter y or n\n"
	fi

	read -p ">" ConfirmChoice

	if [ "${ConfirmChoice}" == y ] || [ "${ConfirmChoice}" == n ]; then 
	    ConfirmReset=0
	fi
    done

#End script if user chooses 'no'
    if [ "${ConfirmChoice}" == n ]; then
	printf "After you finish these steps run the script again\n"
	exit 0
    fi


#Domain controller config choice
    printf "Choose your configuration\n1 - Configure as Primary domain controller\n2 - Replicate domain controller\n"
    ChoiceReset=1
    while [ "${ChoiceReset}" == 1 ]; do
	if [ -z "${ConfMessage}" ]; then
	    ConfMessage=1
	elif [ "${ConfMessage}" ]; then
	    printf "\nMust enter 1 or 2\n"
	fi

	read -p ">" ConfChoice

	if [ "${ConfChoice}" == 1 ] || [ "${ConfChoice}" == 2 ]; then
	    ChoiceReset=0
	fi
    done


#Installing needed packages and moving config file (it is created automaticaly when provisioning/joining domain)
    DEBIAN_FRONTEND=noninteractive apt -yq install acl attr samba samba-dsdb-modules samba-vfs-modules winbind libpam-winbind libnss-winbind libpam-krb5 krb5-config krb5-user dnsutils resolvconf rsync
    mkdir -p /etc/sambaBckp/
    mv -f /etc/samba/smb.conf /etc/sambaBckp/smb.conf.bckp



#Getting varibles for krb5 config file and domain join or for domain provision
    #Kerberos realm
    printf "Enter the Kerberos realm\n"
    while [ -z "${KerberosRealm}" ]; do
	if [ -z "${KRBMessage}" ]; then
	    KRBMessage=1
	elif [ "${KRBMessage}" ]; then
	    printf "\nKerberos realm must be filled\n"
	fi
	read -p ">" KerberosRealm
    done

    #NetBios domain name
    printf "Enter the NetBios domain name (In example.com -> EXAMPLE)\n"
    while [ -z "${DomainName}" ]; do
	if [ -z "${DNMessage}" ]; then
	    DNMessage=1
	elif [ "${DNMessage}" ]; then
	    printf "\nDomain name must be filled\n"
	fi
	read -p ">" DomainName
    done

    #Local IP
    printf "Enter the local IP of this domain controller\n"
    while [ -z "${DCIP}" ]; do
	if [ -z "${DomCIP}" ]; then
	    DomCIP=1
	elif [ "${DomCIP}" ]; then
	    printf "\nIP must be filled\n"
  	fi
	read -p ">" DCIP
    done


#Samba as Primary Controller
    if [ "${ConfChoice}" == 1 ]; then

	#Getting admin password needed for provision
	printf "Set the domain administrator password\n"
	while [ -z "${AdminPass}" ]; do
	    if [ -z "${ADPMessage}" ]; then
		ADPMessage=1
	    elif [ "${ADPMessage}" ]; then
		printf "\nAdmin password must be filled\n"
	    fi

	    read -s -p ">" AdminPass
	done

#Provisioning domain and replacing original krb5 config file with an auto-created one
	samba-tool domain provision --server-role=dc --use-rfc2307 --dns-backend=SAMBA_INTERNAL --realm="${KerberosRealm}" --domain="${DomainName}" --adminpass="${AdminPass}"
	mv -f /etc/krb5.conf /etc/sambaBckp/krb5.conf.bckp
	cp -f /var/lib/samba/private/krb5.conf /etc/krb5.conf


#Configuring resolvconf so that the DC is able to locate services like LDAP and Kerberos
	nameservers="nameserver ${DCIP}\nsearch ${KerberosRealm}\n"
	sed -i "s/nameserver ${DCIP}//g" /etc/resolvconf/resolv.conf.d/head
	sed -i "s/search ${KerberosRealm}//g" /etc/resolvconf/resolv.conf.d/head
	nameservers="${nameservers}$(cat /etc/resolvconf/resolv.conf.d/head | grep -w nameserver)\n"
	printf "${nameservers}" > /etc/resolvconf/resolv.conf.d/head
	systemctl restart resolvconf

#Configuring rsync
	printf "Do you want rsync to be configured? (y/n)\n"
	RsyncConfigReset=1
	while [ "${RsyncConfigReset}" == 1 ]; do
	    if [ -z "${RsyncConfigMessage}" ]; then
		RsyncConfigMessage=1
	    elif [ "${RsyncConfigMessage}" ]; then
		printf "\nMust enter y or n\n"
	    fi

	    read -p ">" RsyncConfig

	    if [ "${RsyncConfig}" == y ] || [ "${RsyncConfig}" == n ]; then 
		RsyncConfigReset=0
	    fi
	done

#Configure Rsync
	if [ "${RsyncConfig}" == y ]; then
	
	    #Set the password for rsync
	    printf "Set the Rsync password\n"
	    while [ -z "${RsyncPass}" ]; do
		if [ -z "${RsyncPassMessage}" ]; then
		    RsyncPassMessage=1
		elif [ "${RsyncPassMessage}" ]; then
		    printf "\nRsync Password must be filled\n"
		fi
		read -s -p ">" RsyncPass
	    done

	    #Set the location for rsyncd.secret
	    printf "\nEnter the rsyncd.secret file location (leave empty to set default - /var/lib/samba/rsyncd.secret)\n"
	    read -p ">" RsyncSecrets
	    if [ -z "${RsyncSecrets}" ]; then
		RsyncSecrets=/var/lib/samba/rsyncd.secret
	    fi

#Copy rsyncd.conf to /etc/rsyncd.conf, create rsyncd.secret file and add the secrets file location
#to rsyncd.conf
	    cp -f $(dirname $0)/rsyncd.conf /etc/rsyncd.conf
	    printf "sysvol-replication:${RsyncPass}" > ${RsyncSecrets}
	    printf "\nsecrets file = ${RsyncSecrets}" >> /etc/rsyncd.conf
#Change rsyncd.secret
	    chmod 600 /var/lib/samba/rsyncd.secret
	    systemctl restart rsync
	fi



#Samba DC replicant
    elif [ "${ConfChoice}" == 2 ]; then

	#Getting the IP of the primary DC
	printf "Enter the IP of the primary domain controller\n"
	while [ -z "${PDCIP}" ]; do
	    if [ -z "${PDCIPMessage}" ]; then
		PDCIPMessage=1
	    elif [ "${PDCIPMessage}" ]; then
		printf "\nIP must be filled\n"
	    fi
	    read -p ">" PDCIP
	done

#Configuring krb5
	printf "[libdefaults]\ndns_lookup_realm = false\ndns_lookup_kdc = true\ndefault_realm = ${KerberosRealm^^}" > /etc/krb5.conf

#Configuring resolvconf so that the DC is able to locate services like LDAP and Kerberos
	nameservers="nameserver ${PDCIP}\nsearch ${KerberosRealm}\n"
	sed -i "s/nameserver ${PDCIP}//g" /etc/resolvconf/resolv.conf.d/head
	sed -i "s/search ${KerberosRealm}//g" /etc/resolvconf/resolv.conf.d/head
	nameservers="${nameservers}$(cat /etc/resolvconf/resolv.conf.d/head | grep -w nameserver)\n"
	printf "${nameservers}" > /etc/resolvconf/resolv.conf.d/head

	systemctl restart resolvconf

#Choosing a join method
	printf "Join to domain using\n1 - Username and password (using administrator account)\n2 - Kerberos\n"
	ChoiceReset=1
	while [ "${ChoiceReset}" == 1 ]; do
	    if [ -z "${JoinConfMessage}" ]; then
		JoinConfMessage=1
	    elif [ "${JoinConfMessage}" ]; then
		printf "\nMust enter 1 or 2\n"
	    fi

	    read -p ">" JoinChoice

	    if [ "${JoinChoice}" == 1 ] || [ "${JoinChoice}" == 2 ]; then 
		ChoiceReset=0
	    fi
	done

#Join machine to the domain and replicate DC
	if [ "${JoinChoice}" == 1 ]; then
	    #Joining to domain using username and password
	    samba-tool domain join ${KerberosRealm} DC -U"${DomainName^^}/administrator"
	elif [ "${JoinChoice}" == 2 ]; then
	    #Joining using kerberos
	    kinit administrator
	    samba-tool domain join ${KerberosRealm} DC -k yes
	fi

#Configure rsync
	printf "Samba is unable to replicate the sysvol folder itself and so this script"\
"works\n around it using rsync. This only works if the main DC is a Samba server.\n"\
"Do NOT choose to replicate sysvol using this script if your main DC is a Windows server!\n"

	printf "Do you want to replicate sysvol using rsync? (y/n)\n"
	Reset=1
	while [ "${Reset}" == 1 ]; do
	    if [ -z "${SysvolReplMessage}" ]; then
		SysvolReplMessage=1
	    elif [ "${SysvolReplMessage}" ]; then
		printf "\nMust enter y or n\n"
	    fi

	    read -p ">" SysvolRepl

	    if [ "${SysvolRepl}" == y ] || [ "${SysvolRepl}" == n ]; then 
		Reset=0
	    fi
	done

	if [ "${SysvolRepl}" == y ]; then
	    #Rsync password for the Sysvol folder replication
	    printf "Enter Sysvol replication password\n"
	    while [ -z "${SysvolPass}" ]; do
		if [ -z "${SysvolPassPMessage}" ]; then
		    SysvolPassPMessage=1
	        elif [ "${SysvolPassMessage}" ]; then
		    printf "\nSysvol password must be filled\n"
		fi
		read -s -p ">" SysvolPass
	    done

#Replace the idmap.ldb file
	    mv -f /var/lib/samba/private/idmap.ldb /etc/sambaBckp/idmap.ldb.bckp
	    cp -f $(dirname $0)/idmap.ldb /var/lib/samba/private/idmap.ldb
#Clear the Samba Net cache
	    net cache flush
#Config Rsync and change permission so that .secrets file isn't world readable
	    printf "${SysvolPass}" > /var/lib/samba/rsyncd-sysvol.secret
	    chmod 600 /var/lib/samba/rsyncd-sysvol.secret
#List existing cron jobs
	    if [ -e /var/spool/cron/crontab/root ]; then
		crontab -l > tmpcron
	    fi
#Create rsync sysvol replication cron job
	    printf "\n*/5 * * * * rsync -XAavz --delete-after --password-file=/var/lib/samba/rsyncd-sysvol.secret rsync://sysvol-replication@${PDCIP}/SysVol/ /var/lib/samba/sysvol/\n" >> tmpcron
	    crontab tmpcron
	    rm -f tmpcron
#Reseting sysvol
	    samba-tool ntacl sysvolreset
	fi
    fi


#Stoping samba related processes
    systemctl stop smbd nmbd winbind
    systemctl mask smbd nmbd winbind
    systemctl disable smbd nmbd winbind


#Starting Samba service
    systemctl unmask samba-ad-dc
    systemctl enable samba-ad-dc
    systemctl start samba-ad-dc


#Setup logging
    printf "\nSet the logging options\n"
    printf 'Enter the log file (leave empty to set default - /var/log/samba/%%m.log)\n'

    #Log file parameter
    read -p ">" LogFile
    if [ -z ${LogFile} ]; then
	LogFile=/var/log/samba/%m.log
    fi

    printf "Enter the log level (leave empty to set default - 1)\n"
    read -p ">" LogLevel
    if [ -z ${LogLevel} ]; then
	LogLevel=1
    fi

    #Insert logging options into smb.conf
    sed -i "/\[global\]/a\	log file = $LogFile\n	log level = $LogLevel" /etc/samba/smb.conf



else
    printf "Script must be started as root\n"
fi

exit 0
