#!/bin/bash

#Check if user is root
if [ "$EUID" == 0 ]; then

#Confirming that conditions needed for the correct funtioning of the script are met
    printf "\nBefore you run this script make sure\n- you have set a static IP adresses for your DC\n- your DC correctly resolves "\
"fully-qualified domain name and short hostname (in /etc/hosts)\n- Your DCs and domain members have synchronised time using NTP"\
"\nIn case of a domain controller replication\n- Copy the idmap.ldb file from you PDC into the folder where"\
"this script is located\nIf your PDC is on Samba: -rsync installed\n-"

    printf "Are these conditions met? y/n\n"


    #Cycle that keeps repeating until user inputs one of the correct values
    ConfirmReset=1
    while [ "${ConfirmReset}" == 1 ]; do

	#The variable ConfirmMessage doesn't exist on the first run-through and so it is set.
	#If the user then enters a wrong value and the cycle continues, the variable is
	#already set and so the message is shown
	if [ -z "${ConfirmMessage}" ]; then
	    ConfirmMessage=1
	elif [ "${ConfirmMessage}" ]; then
	    echo "Must enter y or n"
	fi

	#Wait for user input and save it into a variable
	read -p ">" ConfirmChoice

	#If the user inserted the right value, ConfirmReset is set to 0, making the cycle
	#condition false and ending the cycle
	if [ "${ConfirmChoice}" == y ] || [ "${ConfirmChoice}" == n ]; then 
	    ConfirmReset=0
	fi
    done


    if [ "${ConfirmChoice}" == n ]; then
	echo "After you finish these steps run the script again"
	exit 0
    fi


#Domain controller config choice
    printf "Choose your configuration\n1 - Configure as Primary domain controller\n2 - Replicate domain controller\n"

    #Cycle asking user for input
    ChoiceReset=1
    while [ "${ChoiceReset}" == 1 ]; do
	if [ -z "${ConfMessage}" ]; then
	    ConfMessage=1
	elif [ "${ConfMessage}" ]; then
	    echo "Must enter 1 or 2"
	fi

	read -p ">" ConfChoice

	if [ "${ConfChoice}" == 1 ] || [ "${ConfChoice}" == 2 ]; then 
	    ChoiceReset=0
	fi
    done


#Installing needed packages and removing config file (it is created automaticaly
#when provisioning/joining domain)
    DEBIAN_FRONTEND=noninteractive apt -yq install acl attr samba samba-dsdb-modules samba-vfs-modules winbind libpam-winbind libnss-winbind libpam-krb5 krb5-config krb5-user dnsutils resolvconf rsync
    rm /etc/samba/smb.conf



#Getting varibles for krb5 config file and domain join or for domain provision

	#Cycle asking user for input
	while [ -z "${KerberosRealm}" ]; do
	    if [ -z "${KRBMessage}" ]; then
	        KRBMessage=1
	    elif [ "${KRBMessage}" ]; then
		echo "Kerberos realm must be filled"
	    fi
	    read -p "Enter Kerberos realm:" KerberosRealm
	done

	#Cycle asking user for input
	while [ -z "${DomainName}" ]; do
	    if [ -z "${DNMessage}" ]; then
	        DNMessage=1
	    elif [ "${DNMessage}" ]; then
	    echo "Domain name must be filled"
	    fi
	    read -p "Enter NetBios domain name (In example.com -> EXAMPLE):" DomainName
	done

	#Cycle asking user for input
	while [ -z "${DCIP}" ]; do
	    if [ -z "${DomCIP}" ]; then
		ADPI=1
	    elif [ "${DomCIP}" ]; then
		echo "IP must be filled"
	    fi
	    read -p "Enter the local IP of this domain controller:" DCIP
	done




#Samba as Primary Controller
    if [ "${ConfChoice}" == 1 ]; then

#Getting admin password needed for provision
	#Cycle asking user for input
	while [ -z "${AdminPass}" ]; do
	    if [ -z "${ADPMessage}" ]; then
		ADPMessage=1
	    elif [ "${ADPMessage}" ]; then
		echo "Admin password must be filled"
	    fi

	    read -s -p "Enter domain administrator password:" AdminPass
	done

#Provisioning domain and replacing original krb5 config file with an auto-created one
	samba-tool domain provision --server-role=dc --use-rfc2307 --dns-backend=SAMBA_INTERNAL --realm="${KerberosRealm}" --domain="${DomainName}" --adminpass="${AdminPass}"
	cp /var/lib/samba/private/krb5.conf /etc/krb5.conf

#Configuring resolvconf so that the DC is able to locate services like LDAP and Kerberos
	printf "nameserver ${DCIP}\nsearch ${KerberosRealm}\n" > /etc/resolvconf/resolv.conf.d/head
	systemctl restart resolvconf

#Stoping samba related processes
	pkill smbd
	pkill winbindd
	pkill nmbd

#Starting Samba service
	samba





#Samba DC replicant
    elif [ "${ConfChoice}" == 2 ]; then

#Getting the IP of the primary DC
	while [ -z "${PDCIP}" ]; do
	    if [ -z "${PDCIPMessage}" ]; then
		PDCIPMessage=1
	    elif [ "${PDCIPMessage}" ]; then
		echo "IP must be filled"
	    fi
	    read -p "Enter the IP of the primary domain controller:" PDCIP
	done

#Configuring krb5
	printf "[libdefaults]\ndns_lookup_realm = false\ndns_lookup_kdc = true\ndefault_realm = ${KerberosRealm^^}" > /etc/krb5.conf

#Configuring resolvconf so that the DC is able to locate services like LDAP and Kerberos
	printf "nameserver ${PDCIP}\nsearch ${KerberosRealm}\n" > /etc/resolvconf/resolv.conf.d/head
	systemctl restart resolvconf

#Choosing a join method
	printf "Join to domain using\n1 - Username and password (using administrator account)\n2 - Kerberos\n"
	ChoiceReset=1
	while [ "${ChoiceReset}" == 1 ]; do
	    if [ -z "${JoinConfMessage}" ]; then
		JoinConfMessage=1
	    elif [ "${JoinConfMessage}" ]; then
		echo "Must enter 1 or 2"
	    fi

	    read -p ">" JoinChoice

	    if [ "${JoinChoice}" == 1 ] || [ "${JoinChoice}" == 2 ]; then 
		ChoiceReset=0
	    fi
	done

	if [ "${JoinChoice}" == 1 ]; then
	    #Joining to domain using username and password
	    samba-tool domain join ${KerberosRealm} DC -U"${DomainName^^}/administrator"
	elif [ "${JoinChoice}" == 2 ]; then
	    #Joining using kerberos
	    kinit administrator
	    samba-tool domain join ${KerberosRealm} DC -k yes
	fi


#Choosing what system is the PDC on
	printf "Is PDC a\n1 - Windows server\n2 - Samba PDC\n"
	#Cycle asking user for input
	ChoiceReset=1
	while [ "${ChoiceReset}" == 1 ]; do
	    if [ -z "${SysvolConfMessage}" ]; then
		SysvolConfMessage=1
	    elif [ "${SysvolConfMessage}" ]; then
		echo "Must enter 1 or 2"
	    fi

	    read -p ">" SysvolChoice

	    if [ "${SysvolChoice}" == 1 ] || [ "${SysvolChoice}" == 2 ]; then 
		ChoiceReset=0
	    fi
	done
#Windows Server PDC
	if [ "${SysvolChoice}" == 1 ]; then
	    printf "To replicate the sysvol folder you must set up a task on your Primary domain controller\n"\
"-Click 'Start' / 'Run' / type 'taskschd.msc' and click 'OK'\n-Right-click to 'Task Scheduler'"\
"/ choose 'Create Task'\n-Enter a task name\n-Select 'Run whether user is logged on or not'\n"\
"-Navigate to the 'Triggers' tab and click the 'New' button\n-Select 'Daily', check\n"\
"'Repeat task every: 5 minutes' and 'for a duration of: 1 day'. Choose the time for the first start\nabout"\
"15 min in the future, to have enough time for the remaining steps\n-Click 'OK' to save the trigger\n"\
"-Navigate to the 'Actions' tab and click the 'New' button\n-Choose 'Start a program' and fill the fields"\
"with following path/arguments:\n	Program/script:  C:\Windows\System32\Robocopy.exe\n"\
"	Add arguments (optional):  \\IP_of_this_DC\SYSVOL\Domain_name\ C:\Windows\SYSVOL\domain\ /mir /sec\n"\
"-Click 'OK' to save the action\n-Save the task with 'OK'\n Restart the File Replication Service\n"\
"-'Start' / 'Run' / enter 'services.msc' and click 'OK'\n-Restart the 'File Replication Service'\n"\
"After the replication task is started enter 'y' to continue\nIn case you currently cannot setup the "\
"replication enter 'n'\nand you will be shown steps to take after replication is setup (y/n)"

	    #Cycle asking user for input
	    WindowsReplReset=1
	    while [ "${WindowsReplReset}" == 1 ]; do
		if [ -z "${WindowsReplMessage}" ]; then
		    WindowsReplMessage=1
		elif [ "${WindowsReplMessage}" ]; then
		    echo "Must enter y or n"
		fi

		read -p ">" WindowsRepl

		if [ "${WindowsRepl}" == y ] || [ "${WindowsRepl}" == n ]; then 
		    WindowsReplReset=0
		fi
	    done

	    #If the user chooses not to setup replication on the Windows PDC
	    if [ "${WindowsRepl}" == n ]; then
		exit 0
	    else
		printf "When you do start the replication:\n-Reset the Sysvol folder "\
"using the command 'samba-tool ntacl sysvolreset'\n-Kill the winbindd,nmbd and smbd processes\n"\
"-Start samba using the command 'samba'"
	    fi


#Samba PDC
	elif [ "${SysvolChoice}" == 2 ]; then

	    #Cycle asking user for input
	    while [ -z "${SysvolPass}" ]; do
		if [ -z "${SysvolPassPMessage}" ]; then
		    SysvolPassPMessage=1
	        elif [ "${SysvolPassMessage}" ]; then
		    echo "Sysvol password must be filled"
		fi
		read -s -p "Enter Sysvol replication password:" SysvolPass
	    done


#Replace the idmap.ldb file
	    idmapDir="$(dirname $0)/idmap.ldb"
	    cp ${idmapDir} /var/lib/samba/private/idmap.ldb
#Clear Winbind cache
	    net cache flush

#Config Rsync and change permission so that .secrets file isn't world readable
	    printf "${SysvolPass}" > /var/lib/samba/rsyncd-sysvol.secret
	    chmod 600 /var/lib/samba/rsyncd-sysvol.secret

#List existing cron jobs
	    if [ -e /var/spool/cron/crontab/root ]; then
		crontab -l > tmpcron
	    fi
#Add rsync sysvol replication cron job
	    printf "\n*/5 * * * * rsync -XAavz --delete-after --password-file=/var/lib/samba/rsyncd-sysvol.secret rsync://sysvol-replication@${PDCIP}/SysVol/ /var/lib/samba/sysvol/\n" >> tmpcron
	    crontab tmpcron
	    rm tmpcron

	fi

#reseting sysvol
	samba-tool ntacl sysvolreset

#Stoping samba related processes
	pkill smbd
	pkill winbindd
	pkill nmbd

#Starting Samba service
	samba

    fi
else
    echo "Script must be started as root"
fi

exit 0


#Rsync should ask for username as well
